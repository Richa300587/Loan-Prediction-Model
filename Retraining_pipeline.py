# -*- coding: utf-8 -*-
"""Retraining_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XeMBsZX1fjj-aDq4eGlJT9ct2fZMoja7
"""

from google.colab import drive
import sys
drive.mount('/content/drive')
sys.path.append('/content/drive/MyDrive/Loanmodel_custom_modules')
import confi as confi
import preprocessing as lp
p=confi.artifact_path

import importlib
import subprocess

# Read the list of packages from the file
with open('/content/drive/MyDrive/Loanmodel_custom_modules/Loanrequirement.txt', 'r') as f:
    packages = [line.strip() for line in f.readlines()]

# Import each package, installing it via pip if necessary
for package in packages:
    try:
        importlib.import_module(package)
        print(package)
    except ImportError:
        print(f"{package} is not installed. Installing...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])

import numpy as np
import pandas as pd
import pickle
import sys
from pathlib import Path
import os
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import chi2_contingency
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import MinMaxScaler
pd.set_option('display.max_columns', 1500)
# set seed for reproducibility
np.random.seed(123)


import warnings
warnings.filterwarnings('ignore')

#Extend cell width
from IPython.core.display import display, HTML
display(HTML("<style>.container { width:80% !important; }</style>"))
from category_encoders import TargetEncoder
from sklearn.pipeline import Pipeline

class train_function:
  def __init__(self):
    pass
  def train_function(self,f):
    f.dropna(subset=['MIS_Status'],inplace=True)
    f['bank_customer_state']=np.where(f['BankState']==f['State'],1,0)
    f['MIS_Status']=f['MIS_Status'].replace({'CHGOFF':1,'P I F':0}).astype(float)
    y=f.MIS_Status
    pipeline=Pipeline([('money_data',lp.money_data(variables=confi.money_columns_in_string_format)),
                   ('Numerical_tain_impute',lp.Numerical_train_imputer(path=p,variables=confi.Numerical_columns)),
                   ('categorical_train_imputer',lp.categorical_train_imputer(path=p,variables=confi.categorical_columns)),
                   ('drop_colunms',lp.drop_colunms(variables=confi.columns_to_drop)),
                   ('onehot_train_encoder',lp.onehot_train_encoder(path=p,enc=OneHotEncoder(handle_unknown='ignore',sparse=False),variables=confi.one_hot_col)),
                   ('target_train_encoder',lp.target_train_encoder(path=p,enc=TargetEncoder(handle_unknown='value'),variables=confi.target_hot_col)),
                   ('scalar_train_encoder',lp.scalar_train_encoder(path=p,scale=MinMaxScaler(),variables=confi.scaling_columns))])
    f=pipeline.fit_transform(f,y=y)
    model=pickle.load(open(p+'StackingClassifier_model.pkl','rb'))
    result=model.train(f)
    return result